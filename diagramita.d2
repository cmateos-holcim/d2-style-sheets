...@Styles

nonSapBucket: {
    class: [AWSStorage-S3]
}

awsAccount: AWS Cloud {
    label.near: top-center
    icon: https://icons.terrastruct.com/aws%2F_Group%20Icons%2FAWS-Cloud-alt_light-bg.svg
    icon.near: top-left
    style: {
        stroke: green
        font-color: green
        fill: white
      }

    sap: {
        label: ""
        class: [Miscellaneous-Sap]
    }

    static: {
        label: static
        label.near: top-left
        class: [White;Title]
        apiGateway: {
            label: dok4sap-api-gw-<sap_sys_id>
            class: [AWSNetworking-Api-Gateway]
        }
        apiGatewayRole: {
            label: role_api_gw
            class: [AWSSecurityIdentity-IAM-Role]
        }
        secretAPIQuentaTsToken: {
            class: [AWSSecurityIdentity-Secret-Manager]
        }
        sapUser: {
            label: sa-<sap_sys_id>-sap-cxlink-holcim
            class: [AWSSecurityIdentity-IAM-User]
        }
        mulesoftUser: {
            class: [AWSSecurityIdentity-IAM-User]
        }
        transformationUser: {
            class: [AWSSecurityIdentity-IAM-User]
        }

        apiGateway -> apiGatewayRole
    }

    dynamic: Â¨{
        label: dynamic
        label.near: top-left
        class: [White;Title]

        bucket: {
            label: <sap_sys_id>-<sap_content_id>sap-cxlink-holcim
            class: [AWSStorage-S3]
        }
        bucket -> timestamp.timestampLambda: {
            label: trigger
            class: animated
        }
        timestamp.timestampLambda -> bucket: {
            label: timestamped
            class: animated
        }
        bucket -> atrezzo.lambda:{
            label: trigger
            class: animated
        }
        atrezzo.lambda -> bucket :{
            label: timestamped
            class: animated
        }
        attorney.sns -> sqs.sqs: {
            label: attorney == true
            class: animated
        }

        timestamp: {
            label: timestamp=true
            label.near: top-left
            class: [White;Title]

            timestampLambda: {
                class: [AWSCompute-Lambda]
            }
            reprocessLambda: {
                class: [AWSCompute-Lambda]
            }
            reprocessSqs: {
                class: [AWSApplicationIntegration-SQS]
            }
            reprocesSqsDeadLetterQueue: {
                class: [AWSApplicationIntegration-SQS]
            }
            reprocessLambdaSqsDeadLetterQueue: {
                class: [AWSApplicationIntegration-SQS]
            }

            timestampLambda -> reprocessSqs -> reprocessLambda -> reprocessLambdaSqsDeadLetterQueue
            reprocessSqs -> reprocesSqsDeadLetterQueue
        }

        sqs: {
            class: [White;Title]
            label: sqs=true
            label.near: top-left
            sqs: {
                class: [AWSApplicationIntegration-SQS]
            }
            lambda: {
                class: [AWSCompute-Lambda]
            }

            sqs -> lambda:{
                label: trigger
            }
        }

        attorney: {
            label: attorney=true
            label.near: top-left
            class: [White;Title]

            sns: {
                label: attorney-<sap_sys_id>-<sap_content_id>-sap-cxlink-holcim
                class: [AWSApplicationIntegration-SNS]
            }
            sqs: {
                label: attorney-<sap_sys_id>-<sap_content_id>-sap-cxlink-holcim
                class: [AWSApplicationIntegration-SQS]
            }
            lambda: {
                label: attorney-<sap_sys_id>-<sap_content_id>-sap-cxlink-holcim
                class: [AWSCompute-Lambda]
            }
            certificate: {
                label: holcim-certificate
                class: [AWSSecurityIdentity-ACM-Certificate]
            }
            dynamo: {
                label: attorney-failed-events-<sap_sys_id>-<sap_content_id>
                class: [AWSDatabase-DynamoDB]
            }

            sqs -> lambda:{
                label: trigger
            }
            lambda -> dynamo: {
                label: failed
            }
            lambda <- certificate: use
            sns -> sqs:{
                label: suscribe
                class: animated
            }
        }

        atrezzo: {
            label: atrezzo=true
            label.near: top-left
            class: [White;Title]

            lambda: {
                class: [AWSCompute-Lambda]
            }
            dynamo: {
                class: [AWSDatabase-DynamoDB]
            }

            lambda -> dynamo: {
                label: failed
            }
        }
    }

    static.apiGateway -> dynamic.bucket
    dynamic.timestamp.timestampLambda -> static.secretAPIQuentaTsToken
    dynamic.timestamp.reprocessLambda -> static.secretAPIQuentaTsToken

    static.sapUser -> sap
    sap -> dynamic.sqs.sqs: {
        label: attorney == false
        class: animated
    }
    sap -> dynamic.attorney.sns: {
        class: animated
    }
    sap -> dynamic.bucket: {
        class: animated
    }
}

awsAccount.dynamic.atrezzo.lambda -> nonSapBucket
